#!/usr/bin/env ruby

require 'slop'
require_relative '../lib/msp430_bsl'

# Force sync on STDOUT write. This way the logger flushes its output after every write
STDOUT.sync = true

include Msp430Bsl::Utils

MAX_WRITE_ATTEMPTS = 3
SUPPORTED_OUTPUT_FORMATS = %w(hex raw_data)
EXTRACT_PASS_FROM_FILE_REGEX = /\:10FFE000(.{32})|\:10FFF000(.{32})/.freeze

@opts = {}
begin
  @opts = Slop.parse help: true do |o|
    o.string  '-d', '--device', 'Mandatory: Path to serial programmer device', required: true
    o.string  '-g', '--logfile', 'Path to logfile'
    o.string  '-p', '--password', '32 bytes password string needed to unlock BSL. Defaults to 32 times 0xFF', default: Msp430Bsl::Configs::CMD_RX_PASSWORD.join
    o.string  '-t', '--extract_pass_from', 'Hex file path from where to extract the BSL password. Looks for the 32 words from 0xFFE0 to 0xFFFF'
    o.string  '-l', '--loglevel', "Logger level. One of ['fatal', 'error', 'warn', 'info', 'debug']. Default: 'debug'", default: :debug
    o.integer '-b', '--baud', 'BAUD rate with which communicate to BSL. Default: 115200', default: 115200
    o.bool    '-h', '--help', 'Print this help' do
      puts "#{o}\n"
      exit
    end
  end
rescue Slop::MissingArgument => e
  puts "Error: #{e}. Maybe you specified an empty argument?"
  exit
rescue Slop::UnknownOption => e
  puts "Error: #{e}"
  exit
end

def logger
  @logger ||= build_logger_from @opts
end

def outfile
  @outfile ||= if @opts[:outfile]
                 File.open(File.expand_path(@opts[:outfile]), 'w')
               else
                 STDOUT
               end
end

# Validations
unless Msp430Bsl::Configs::BAUD_RATES.include? @opts[:baud]
  logger.error "BAUD rate #{@opts[:baud]} not supported. Available BAUD rates: #{ Msp430Bsl::Configs::BAUD_RATES.join ', ' }"
  exit 2
end

p @opts[:password]

# If password param has been provided, convert given string
if @opts[:password] && !@opts[:password].eql?(Msp430Bsl::Configs::CMD_RX_PASSWORD.join)
  @opts[:password] = @opts[:password].scan(EXTRACT_PASS_FROM_FILE_REGEX).flatten.compact.join.to_hex_ary
  unless @opts[:password].any?
    logger.error "Wrong password provided. Please copy entirely hex file rows staring with :10FFE0 and :10FFF0"
    exit
  end
end

# If extract_pass_from param has been provided, extract BSL password from given file path
if @opts[:extract_pass_from]
  logger.info "Extracting BSL password from #{@opts[:extract_pass_from]}"
  file_content = File.read @opts[:extract_pass_from]
  lines = file_content.scan(EXTRACT_PASS_FROM_FILE_REGEX).flatten.compact
  @opts[:password] = lines.map { |line| line.scan(/.{2}/).map { |el| el.to_i 16 }}.flatten
  logger.info "BSL pass: #{@opts[:password].to_hex}"
end

### Core

# Build UART Connection
@board = Msp430Bsl::Uart::Connection.new @opts[:device], logger: logger

# Enter BSL
@board.enter_bsl
logger.info "Unlocking BSL's password protected commands"
@board.send_command :rx_password, data: @opts[:password]
@board.send_command :erase_segment, addr: 0x1800

# Reset board if requested to
if @opts[:reset]
  logger.info "Resetting board"
  @board.trigger_reset
end
logger.info 'Closing connection'
@board.close_connection
