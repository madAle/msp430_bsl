#!/usr/bin/env ruby

require 'slop'
require_relative '../lib/msp430_bsl'

# Force sync on STDOUT write. This way the logger flushes its output after every write
STDOUT.sync = true

include Msp430Bsl::Utils

MAX_WRITE_ATTEMPTS = 3
SUPPORTED_OUTPUT_FORMATS = %w(hex)
EXTRACT_PASS_FROM_FILE_REGEX = /\:10FFE000(.{32})|\:10FFF000(.{32})/.freeze

@opts = {}
begin
  @opts = Slop.parse help: true do |o|
    o.string  '-d', '--device', 'Mandatory: Path to serial programmer device', required: true
    o.string  '-o', '--outfile', 'Path to file where to save flash content. Default STDOUT', required: false
    o.string  '-g', '--logfile', 'Path to logfile'
    o.string  '-p', '--password', '32 bytes password string needed to unlock BSL. Defaults to 32 times 0xFF', default: Msp430Bsl::Configs::CMD_RX_PASSWORD.join
    o.string  '-t', '--extract_pass_from', 'Hex file path from where to extract the BSL password. Looks for the 32 words from 0xFFE0 to 0xFFFF'
    o.string  '-s', '--startaddr', "Memory's starting address to read from. Defaults to 0x8000", default: 0x8000
    o.integer '-e', '--endaddr', "Memory's last address to read. Defaults to 0xFFFF", default: 0xFFFF
    o.string  '-l', '--loglevel', "Logger level. One of ['fatal', 'error', 'warn', 'info', 'debug']. Default: 'debug'", default: :debug
    o.string  '-f', '--out_format', "Format of output. Supported formats: [hex]. Default 'hex' (Intel hex)", default: 'hex'
    o.integer '-b', '--baud', 'BAUD rate with which communicate to BSL. Default: 115200', default: 115200
    o.bool    '-h', '--help', 'Print this help' do
      puts "#{o}\n"
      exit
    end
  end
rescue Slop::MissingArgument => e
  puts "Error: #{e}. Maybe you specified an empty argument?"
  exit
rescue Slop::UnknownOption => e
  puts "Error: #{e}"
  exit
end

def logger
  @logger ||= build_logger_from @opts
end

def outfile
  @outfile ||= if @opts[:outfile]
                 File.open(File.expand_path(@opts[:outfile]), 'w')
               else
                 STDOUT
               end
end

# Validations
unless SUPPORTED_OUTPUT_FORMATS.include? @opts[:out_format]
  logger.error "Output file format '#{@opts[:out_format]} is not supported. Supported formats: #{SUPPORTED_OUTPUT_FORMATS.join ','}'"
  exit 1
end

unless Msp430Bsl::Configs::BAUD_RATES.include? @opts[:baud]
  logger.error "BAUD rate #{@opts[:baud]} not supported. Available BAUD rates: #{ Msp430Bsl::Configs::BAUD_RATES.join ', ' }"
  exit 2
end

# Conversions, normalizations, etc...
@opts[:startaddr] = @opts[:startaddr].to_i(16) rescue @opts[:startaddr]
if @opts[:password]
  @opts[:password] = @opts[:password].scan(EXTRACT_PASS_FROM_FILE_REGEX).flatten.compact.join.to_hex_ary
  puts "PASS: #{@opts[:password]}"
  unless @opts[:password].any?
    logger.error "Wrong password provided. Please copy entirely hex file rows staring with :10FFE0 and :10FFF0"
    exit
  end
end

if @opts[:extract_pass_from]
  logger.info "Extracting BSL password from #{@opts[:extract_pass_from]}"
  file_content = File.read @opts[:extract_pass_from]
  lines = file_content.scan(EXTRACT_PASS_FROM_FILE_REGEX).flatten.compact
  @opts[:password] = lines.map { |line| line.scan(/.{2}/).map { |el| el.to_i 16 }}.flatten
  logger.info "BSL pass: #{@opts[:password].to_hex}"
end

# Handy methods

def can_we_ask_another_line?(already_asked_count:, from_addr: , line_size:)
  # We can't exceed Msp430Bsl::Configs::PURE_DATA_MAX_SIZE
  return false if (Msp430Bsl::Configs::PURE_DATA_MAX_SIZE - (already_asked_count * line_size)) < line_size

  # We can't ask lines beyond endaddr memory address
  return false if (from_addr + ((already_asked_count + 1) * line_size)) >= @opts[:endaddr]

  true
end


### Core

# Build UART Connection
@board = Msp430Bsl::Uart::Connection.new @opts[:device], logger: logger

# Enter BSL
@board.enter_bsl
logger.info "Unlocking BSL's password protected commands"
@board.send_command :rx_password, data: @opts[:password]
@board.send_command :lock_unlock_info
# Switch UART to max speed
logger.info "Changing UART BAUD to #{@opts[:baud]}"
@board.send_command :change_baud_rate, data: Msp430Bsl::Configs::BAUD_RATES[@opts[:baud]]
@board.set_uart_speed @opts[:baud]

data_file = case @opts[:out_format]
            when 'hex', :hex
              Msp430Bsl::HexFile.new
            else
              Msp430Bsl::HexFile.new
            end

logger.info "Reading flash content..."
current_addr = @opts[:startaddr]
lines_to_ask = 1
while current_addr < @opts[:endaddr]
  # While there's still room for asking a line and we're inside our bounds (startaddr : endaddr)
  while can_we_ask_another_line?(already_asked_count: lines_to_ask, from_addr: current_addr, line_size: data_file.line_data_size)
    lines_to_ask += 1
  end

  resp = @board.send_command :tx_data_block, addr: current_addr, data: (lines_to_ask * data_file.line_data_size).to_bytes_ary
  data_file.add_new_lines_from(resp.data, current_addr)
  current_addr += (lines_to_ask * data_file.line_data_size)
  lines_to_ask = 1
end

outfile.write data_file

# Reset board if requested to
if @opts[:reset]
  logger.info "Resetting board"
  @board.trigger_reset
end
logger.info 'Closing connection'
@board.close_connection
if outfile != STDOUT
  logger.info "Flash content dumped to #{outfile.path}"
end
