#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require
require 'slop'
require_relative '../lib/msp430_bsl'

begin
  opts = Slop.parse help: true do |o|
    o.string '-d', '--device', 'Mandatory: Path to serial programmer device', required: true
    o.string '-f', '--hexfile', 'Mandatory: Path to HEX file to load', required: true
    o.string '-g', '--logfile', 'Path to logfile'
    o.string '-l', '--loglevel', "Logger level. One of ['fatal', 'error', 'warn', 'info', 'debug']. Defaults to 'debug'", default: :debug
    o.bool '-c', '--check', 'Verify flash content after upload', default: true
    o.bool '-h', '--help', 'Print this help' do
      puts "#{o}\n"
      exit
    end
  end
rescue Slop::MissingArgument => e
  puts "Error: #{e}. Maybe you specified an empty argument?"
  exit
rescue Slop::UnknownOption => e
  puts "Error: #{e}"
  exit
end

include Msp430Bsl::Utils

logger = build_logger_from opts

@board = Msp430Bsl::Uart::Connection.new opts[:device], logger: logger

# Enter BSL
@board.enter_bsl
# Mass erase FLASH
logger.info 'Mass erasing FLASH'
@board.send_command :mass_erase
# Unlock BSL protected commands
logger.info "'Unlocking BSL's password protected commands'"
@board.send_command :rx_password, data: Msp430Bsl::Configs::CMD_RX_PASSWORD
# Switch UART to max speed
logger.info 'Changing UART BAUD to 115200'
@board.send_command :change_baud_rate, data: Msp430Bsl::Configs::BAUD_RATES[115200]
@board.set_uart_speed 115200

# If everything has gone well so far...
hexfile = Msp430Bsl::HexFile.new opts[:hexfile]

# Group lines by contiguous memory addr
logger.info 'Writing data into FLASH'
line_groups = hexfile.data_lines_grouped_by_contiguous_addr

p line_groups.map { |g| g.first.addr.to_hex_str }
# exit

# Try to optimize BSL writes
# For each lines group, append as many lines as possible, given the BSL Core Commands buffer size
line_groups.each do |group|
  curr_data_packet = []
  curr_data_size = 0
  # Cycle lines in a group
  group.each do |line|
    if curr_data_packet.empty?
      # Use current line's addr as packet addr
      curr_data_packet << line
      curr_data_size += 2 + line.data_length  # 2 is the addr size (2 bytes)
    elsif (curr_data_size + line.data_length) <= Msp430Bsl::Uart::Connection::CORE_COMMANDS_BUFFER_SIZE
      # If there's still room, append the line data
      curr_data_packet << line
      curr_data_size += line.data_length
    else
      # No room left, send packet
      @board.send_command :rx_data_block, addr: curr_data_packet.first.addr, data: curr_data_packet.map { |line| line.data }.reduce(:+)
      curr_data_packet = []
      curr_data_size = 0
      redo  # Handle current line than would otherwise be skipped
    end
  end

  # Send residual lines before handling next group
  if curr_data_packet.any?
    p curr_data_packet.last.addr.to_hex_str
    @board.send_command :rx_data_block, addr: curr_data_packet.first.addr, data: curr_data_packet.map { |line| line.data }.reduce(:+)
  end
end

# TODO: Verify CRC or read entire flash and compare to hex lines?

logger.info 'Closing connection'
@board.close_connection
