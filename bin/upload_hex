#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require
require 'slop'

loader = Zeitwerk::Loader.new
loader.push_dir 'lib'
core_ext = "#{__dir__}/lib/core_ext/"
loader.ignore core_ext

loader.setup

# Require core_ext files
Dir['./lib/core_ext/**/*.rb'].each { |file| require file }

begin
  opts = Slop.parse help: true do |o|
    o.string '-d', '--device', 'Mandatory: Path to serial programmer device', required: true
    o.string '-f', '--hexfile', 'Mandatory: Path to HEX file to load', required: true
    o.string '-g', '--logfile', 'Path to logfile'
    o.string '-l', '--loglevel', "Logger level. One of ['fatal', 'error', 'warn', 'info', 'debug']. Defaults to 'debug'", default: :debug
    o.bool '-c', '--check', 'Verify flash content after upload', default: true
    o.bool '-h', '--help', 'Print this help' do
      puts "#{o}\n"
      exit
    end
  end
rescue Slop::MissingArgument => e
  puts "Error: #{e}. Maybe you specified an empty argument?"
  exit
rescue Slop::UnknownOption => e
  puts "Error: #{e}"
  exit
end

include Bsl::Utils

logger = build_logger_from opts

@board = Bsl::Uart::Connection.new opts[:device], logger: logger

# Enter BSL
@board.enter_bsl
# Mass erase FLASH
@board.send_command :mass_erase
# Unlock BSL protected commands
@board.send_command :rx_password, data: Bsl::Configs::CMD_RX_PASSWORD
# Switch UART to high speed
@board.send_command :change_baud_rate, data: Bsl::Configs::BAUD_RATES[115200]
@board.set_high_speed

# If everything has gone well so far...
hexfile = File.read opts[:hexfile]
hexfile.each_line do |line|
  # p line
end
